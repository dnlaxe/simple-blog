{
  "slug": "how-i-built-this-blog",
  "title": "How I Built This Blog with Next.js 15",
  "date": "2025-08-04",
  "description": "A detailed breakdown of how I designed and built this blog using the Next.js App Router, Markdown content, and static JSON files.",
  "category": "Dev Log",
  "content": "## Introduction\n\nThis blog is built with Next.js 15 using the App Router. I wanted a setup that was fast, minimal, and fully under my control. All posts are written in Markdown and stored locally as JSON files. In this post, I’ll explain how the system works, including how data flows from the file system to the browser.\n\n## Project Setup\n\nI used the App Router and TypeScript. The folder structure looks like this:\n\n```\n/app\n/components\n/content\n/lib\n/styles\n```\n\nEach post is a `.json` file stored in `/content`. Posts are read at build time or on the server.\n\n## Blog Post Data Format\n\nExample of a post file:\n\n```json\n{\n  \"slug\": \"how-i-built-this-blog\",\n  \"title\": \"How I Built This Blog with Next.js 15\",\n  \"date\": \"2025-08-04\",\n  \"description\": \"A breakdown of how I built this blog\",\n  \"category\": \"Dev Log\",\n  \"content\": \"## Intro...\"\n}\n```\n\n## Server vs Client Separation\n\nThe blog separates logic between server and client:\n\n- **Server-side (default)**: Data loading, route handling, Markdown rendering\n- **Client-side (`'use client'`)**: UI interactions like the theme toggle or reading search params\n\n| File | Type | Purpose |\n|------|------|---------|\n| `getAllPosts()` | Server | Reads all post JSON files |\n| `getPostBySlug()` | Server | Reads a single post |\n| `renderMarkdown()` | Server | Converts Markdown to HTML |\n| `PostCard.tsx` | Server | Renders static post preview |\n| `page.tsx` in `[slug]` | Server | Renders full post content |\n| `ThemeToggle.tsx` | Client | Adds dark mode toggle |\n| `CategoryTabsClient.tsx` | Client | Reads `searchParams` and renders active tab |\n\n## Data Flow Overview\n\nLet’s walk through what happens when a user opens `/blog?category=Dev Log`:\n\n```\n1. Request hits /blog →\n2. Next.js loads `/app/blog/layout.tsx` (shared layout)\n3. Layout renders `CategoryTabsServer`\n4. `CategoryTabsServer` calls `getAllCategories()` → reads posts from disk\n5. Layout renders tabs via `CategoryTabsClient`\n6. Meanwhile, `/app/blog/page.tsx` loads\n7. It awaits `searchParams` → gets category from URL\n8. It calls `getAllPosts()` → filters posts\n9. Each post is rendered using `PostCard.tsx`\n```\n\nFor a single post like `/blog/how-i-built-this-blog`:\n\n```\n1. Request hits /blog/[slug] →\n2. Next.js loads `/app/blog/[slug]/page.tsx`\n3. `params` provides the slug → e.g. 'how-i-built-this-blog'\n4. Calls `getPostBySlug(slug)` → reads JSON from disk\n5. Content is passed to `renderMarkdown()` → converts to safe HTML\n6. HTML is injected into the page\n```\n\n## Rendering Markdown\n\nIn `lib/markdown.ts`, I use:\n\n```ts\nimport { marked } from 'marked';\nimport DOMPurify from 'isomorphic-dompurify';\n\nexport async function renderMarkdown(md: string): Promise<string> {\n  const rawHtml = await marked(md);\n  return DOMPurify.sanitize(rawHtml);\n}\n```\n\nThis keeps posts safe and flexible.\n\n## Shared Layout and Filtering\n\nThe `/app/blog/layout.tsx` file wraps all blog routes. This ensures the category tabs show on every blog page. It uses a `Suspense` boundary to load categories server-side:\n\n```tsx\n<Suspense fallback={null}>\n  <CategoryTabsServer />\n</Suspense>\n```\n\n`CategoryTabsServer.tsx` loads the categories and passes them to `CategoryTabsClient.tsx`, which runs in the browser and highlights the active tab based on the URL.\n\n## Theme Toggle\n\n`ThemeToggle.tsx` is a small client component that toggles a `dark` class on the `html` element using `useEffect`. This enables a full dark/light mode experience without reloading.\n\n## Styling and Fonts\n\nFonts are imported from Google Fonts using `next/font/google`. CSS is organized in `globals.css` using variables for light and dark themes. Markdown elements, headers, and cards are styled with clean defaults.\n\n## Deployment\n\nSince everything is statically rendered and self-contained, this project can be deployed on Vercel, Netlify, or any static host.\n\n## Conclusion\n\nThis blog is simple, fast, and fully customizable. There’s no CMS or database. All content lives in version-controlled JSON files. The App Router made it easy to separate server and client logic, and Markdown gives the posts flexibility.\n\nIt’s lightweight, easy to extend, and feels good to work with. If I revisit this later, I might add tags, pagination, or a series landing page. For now, this setup does exactly what I need."
}
