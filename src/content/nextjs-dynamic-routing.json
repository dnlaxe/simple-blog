{
  "slug": "nextjs-dynamic-routing",
  "title": "Understanding Dynamic Route Segments in Next.js 15",
  "date": "2025-08-04",
  "description": "How I handled dynamic segments in my blog using the latest App Router conventions in Next.js 15.",
  "category": "Dev Log",
  "content": "## The Problem\n\nWhen I built the routing system for this blog, I needed each post to live at its own URL — like `/blog/how-i-built-this-blog`. The slug had to come from the content file name, and be used to render the correct post. In previous versions of Next.js, this was done with a dynamic segment using `[slug]`. That part hasn’t changed.\n\nBut in Next.js 15, the behavior of `params` has changed. Instead of being a plain object, it’s now a **Promise**. This affected both server and client components and required a few adjustments.\n\n## The Goal\n\nI wanted to:\n\n- Display each post at `/blog/[slug]`\n- Load the correct JSON content from `/content`\n- Avoid runtime errors when accessing `params.slug`\n\n## What Changed in Next.js 15\n\nIn version 14 and earlier, you could access `params.slug` directly:\n\n```ts\nexport default function Page({ params }) {\n  const { slug } = params;\n}\n```\n\nIn version 15, this throws an error. `params` is now a **Promise** in server components.\n\n```ts\nexport default async function Page({ params }: { params: Promise<{ slug: string }> }) {\n  const { slug } = await params; // ✅ required\n}\n```\n\nThis change applies to:\n- `params` in `page.tsx` and `layout.tsx`\n- `searchParams` for query strings (also a Promise)\n- `generateMetadata()` and `generateStaticParams()` functions\n\n## The Solution\n\n### 1. Use `await params` in server components\n\nHere’s what the `[slug]/page.tsx` file looks like:\n\n```ts\nexport default async function BlogPostPage({ params }: { params: Promise<{ slug: string }> }) {\n  const { slug } = await params;\n  const post = getPostBySlug(slug);\n  if (!post) return notFound();\n\n  const html = await renderMarkdown(post.content);\n\n  return (\n    <article>\n      <h1>{post.title}</h1>\n      <div dangerouslySetInnerHTML={{ __html: html }} />\n    </article>\n  );\n}\n```\n\n### 2. Use `use(params)` or `useParams()` in client components\n\nIf you're writing a `'use client'` component, `params` can be accessed like this:\n\n```tsx\n'use client';\nimport { use } from 'react';\n\nexport default function Page({ params }: { params: Promise<{ slug: string }> }) {\n  const { slug } = use(params);\n  return <div>{slug}</div>;\n}\n```\n\nAlternatively, use the `useParams()` hook:\n\n```tsx\n'use client';\nimport { useParams } from 'next/navigation';\n\nconst { slug } = useParams();\n```\n\n### 3. Define `generateStaticParams()`\n\nTo statically generate the routes during the build, you can add:\n\n```ts\nexport async function generateStaticParams() {\n  const posts = getAllPosts();\n  return posts.map(post => ({ slug: post.slug }));\n}\n```\n\nThis ensures each post page is prerendered and improves performance.\n\n## Catch-All and Optional Routes\n\nNext.js also supports extended dynamic routes:\n\n- `[...slug]` → matches `/a`, `/a/b`, `/a/b/c`, returns `slug: string[]`\n- `[[...slug]]` → same as above but also matches the root path, returns `slug?: string[]`\n\nExample:\n\n```ts\nexport default async function Page({ params }: { params: Promise<{ slug?: string[] }> }) {\n  const { slug } = await params;\n  // handle undefined or array of path segments\n}\n```\n\n## Final Thoughts\n\nThis new behavior was unexpected at first. But once I adjusted the typing and added `await`, it became consistent and predictable. The separation between server and client logic is now more clear:\n\n- Server = `await params`, `generateStaticParams()`\n- Client = `use(params)` or `useParams()`\n\nThe upside is better flexibility and more predictable hydration — especially for static builds.\n\nNext.js 15 does a lot behind the scenes to optimize routes, but you need to be aware of how dynamic data behaves.\n\nIf you’re migrating from an older version, check all your route handlers and be sure you’re not accessing `params` or `searchParams` directly without awaiting them."
}
